######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.06
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	## PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	## Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.00625
	{% endif %}

######################### PRINT START / END #########################

# !! My print_start is only split into two parts because of my junky M191 macro. There is no reason to do this otherwise. 
# !! This is why I have some weird variable passing between the two print_starts. Just ignore it.

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:		
	# Parameters
	{% set bed = params.BED|int %}
	{% set hotend = params.HOTEND|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}
	{% set material = params.MATERIAL|default(none)|string %}

	# Set the parameters as persistent variables so they can be referenced in PRINT_START2 and elsewhere 
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}	
	#SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=material VALUE={material}
	#FILAMENT_DETECT FILAMENT={params.FILAMENT} EVENT=START

	#UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0  													; cancel exhaust off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=0      										; cancel off timer (if there is one)
	RESETSPEEDS																							; reset speed, accel etc to configured values
	RESET_LEDRGB																						; turn on LED
	RESET_LCDRGB																						; reset LCD RGB
	M117 Starting Warmup
	M104 S140																							; set hotend to no-ooze temp
	M140 S{bed}																							; set bed to target temp
	G28																									; home
	G90																									; absolute positioning
	{% if not printer["temperature_sensor chamber"].temperature >= chamber %}	
			{ action_respond_info("Chamber not at temp yet, pausing...") }								; - if chamber is not at temp yet:
			LED_orange																					; turn LED orange for warmup
			LCD_orange																					; LCD orange
			HEATSOAK T={bed} MOVE=1																		; heatsoak and park in center
			M190 S{bed} 																				; wait for bed final temp
			M117 Heating Chamber {chamber}
			SET_HEATER_TEMPERATURE HEATER=heater_chamber TARGET={chamber + 30}							; setting chamber heater + 30
			Temperature_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber - 5}   				; wait for chamber temp
	{% else %}
			{ action_respond_info("Chamber at or above temp.") }
			LED_yellow																					; turn LED yellow for bed warmup
			LCD_yellow																					; LCD yellow
			{% if printer.heater_bed.temperature < (bed - 2) %}											; - if chamber is already at temp, but bed is not fully heated:
					HEATSOAK T={bed} MOVE=1																; heatsoak and park
					M190 S{bed} 
			{% else %}																					; - if chamber + bed are already at temp:
					HEATSOAK T={bed} MOVE=0			
			{% endif %}																		
			BEEP I=1																					; beep 1 times	    
			M106 S0																						; turn off part cooling fan (from heatsoak)
			LED_green
			LCD_green
			M117 Soak Complete
			SET_HEATER_TEMPERATURE HEATER=heater_chamber TARGET={chamber}  
			M117 Preparing Bed Mesh
			BED_MESH_CLEAR																				; clear bed mesh
			ATTACH_PROBE_LOCK																			; attach klicky
			QUAD_GANTRY_LEVEL																			; quad gantry level
			G28 Z																						; home z
			G90 													 									; absolute positioning
			G0 Z20																						; hop up to prevent knocking probe off after homing Z
			G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500			; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
			BED_MESH_CALIBRATE																			; mesh
			#LOAD_MESH_TEMP BED_TEMPERATURE={BED}	
			G28 Z																						; home z again
			G0 Z20																						; hop up to prevent knocking probe off after homing Z
			DOCK_PROBE_UNLOCK																			; stow probe, unlock
			G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500   									; move to left of nozzle brush
			M109 S{hotend - 30}																			; set & wait for hotend cleaning temp
			SWIPENOZZLE4																				; clean nozzle while hot	
			TEMPADJUSTPA																				; change PA based on bed temp
			#FILAMENTADJUST	
			M117 Calibrating Z
			CALIBRATE_Z																					; calibrate z offset with hot nozzle
			M117 Purging..
			M109 S{hotend}  																			; set & wait for hotend final temp
			CLEAN_NOZZLE																				; purge into bucket then print
			SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1											; enable filament sensor
			#SET_FAN_SPEED FAN=Exhaust SPEED=0.1														; set chamber fan to 10%
			G92 E0                              														; reset Extruder
			BEEP I=2																					; beep 2 times
			M117 Starting Print	
			LED_cyan
			LCD_cyan
	{% endif %}

[gcode_macro PRINT_END]
gcode:
	RESET_LEDRGB
	RESET_LCDRGB																						; revert LCD RGB
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; disable filament sensor
	CLEAR_PAUSE																							; clear pause (from M191) if there is one
	#{% if printer.heater_bed.temperature >= 100 %}												
		#SET_FAN_SPEED FAN=Exhaust SPEED=1  															; crank exhaust fan to 100% to evacuate chamber
	#{% endif %}													
	M400                         	   																	; wait for buffer to clear
	G92 E0                        	    																; zero the extruder
	G1 E-2.0 F3600                																		; retract filament
	M104 S0						 	    			 													; turn only the hotend off
	M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}												; return the bed to temp, some slicers like to turn it off
    M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
	BED_MESH_CLEAR																						; clear bed mesh									
	M117 Print Finished 
	{ action_respond_info("Print Finished") }
	UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=1800	 										; turn everything off in 30 min
	RESETSPEEDS																							; reset speed, accel etc to configured max values
	#SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0														; disable XYE steppers (not z)
    #SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    #SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
	BEEP I=3																							; beep 3 times

[gcode_macro SWIPENOZZLE4]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(4)|int %}
	# Speed
	{% set s = params.S|default(100)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE4
	G90																; absolute positioning
	G0 X125 Z10 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z0 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X85 F{s*60}												; wipe back
		G0 X115	F{s*60}												; wipe forth
	{% endfor %}
	G0 X115	F{s*60}													; wipe back
	G0 Z10 F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE4

######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    LED_red
	LCD_red
	SDCARD_RESET_FILE
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; disable filament sensor
	#{% if printer.heater_bed.temperature >= 100 %}												
		#SET_FAN_SPEED FAN=Exhaust SPEED=1  															; crank exhaust fan to 100% to evacuate chamber
	#{% endif %}													
	M400                         	   																	; wait for buffer to clear
	G92 E0                        	    																; zero the extruder
	G1 E-2.0 F3600                																		; retract filament
	M104 S0						 	    			 													; turn the hotend off
	M140 S0																								; turn the bed off
    M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
	BED_MESH_CLEAR											
	BASE_CANCEL_PRINT
	M117 Print Cancelled
	{ action_respond_info("Print Cancelled") }
	RESETSPEEDS																							; reset speed, accel etc to configured max values
	SET_IDLE_TIMEOUT TIMEOUT=3600 #1hr
	BEEP I=5

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
		{ action_respond_info("Print Paused") }
		BEEP I=5																											; beep 5 times
		LED_red
		LCD_red	
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
	G90																													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
	SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
	M104 S0																												; turn off hotend
	SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
		RESET_LEDRGB
		RESET_LCDRGB																										; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}								
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
	BASE_RESUME
	{ action_respond_info("Resume Printing") }
	BEEP I=5																							; beep 5 times																											; resume print																			; restore idle timeout time
	{% endif %}

[gcode_macro PURGE_NOZZLE]
gcode: 
    {% set LENGTH = params.LENGTH|default(20)|float %} ; purge length
    {% set SPEED = params.SPEED|default(300)|int %} ; mm/min
    {% set RETRACTION_LENGTH = params.RETRACTION_LENGTH|default(0.1)|float %} ; retract distance after purge
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|default(300)|int %} ; retract distance after purge mm/min
    
    SAVE_GCODE_STATE NAME=purge_nozzle_state
    G0 X70 Z10 Y{printer.toolhead.axis_maximum.y} F19500  				; move to left of nozzle brush
    M117 Purging..
	{ action_respond_info("Purging...") }
    #G91
    #M83
    G92 E0
    G1 E{LENGTH} F{SPEED} ; purge 20mm
    #BEEP
    #SLEEP MS=500
    G1 E{ -1 * RETRACTION_LENGTH} F{RETRACTION_SPEED}; retract 0.1mm
    SWIPENOZZLE4
    RESTORE_GCODE_STATE NAME=purge_nozzle_state
   
# Filament runout / change alias	
[gcode_macro M600]
gcode:
	PAUSE

# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)
[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	
######################### CONFIG BACKUP #########################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
#[gcode_macro BACKUP_CFG]
#gcode:
#    RUN_SHELL_COMMAND CMD=backup_cfg
	
#[gcode_shell_command backup_cfg]
#command: sh /home/pi/gitbackup.sh
#timeout: 30.
#verbose: True

######################### SAFETY #########################

# Lower z stepper current (in case of crash). Referenced in my klicky homing overrides and in calibrate_z.
[gcode_macro LOWERCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT=0.35 HOLDCURRENT=0.35
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT=0.35 HOLDCURRENT=0.35
	
# Returns z steppers back to their currents specified in the config.
[gcode_macro RESETCURRENT]
gcode:
	SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings["tmc2209 stepper_z"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings["tmc2209 stepper_z1"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z1"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings["tmc2209 stepper_z2"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z2"].hold_current}
	SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings["tmc2209 stepper_z3"].run_current} HOLDCURRENT={printer.configfile.settings["tmc2209 stepper_z3"].hold_current}	
	
######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	ATTACH_PROBE_LOCK
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z
	DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_PRINTER_OFF DURATION=0  ; cancel off timer (if there is one)
	#SET_FAN_SPEED FAN=Exhaust SPEED=0		 		; turn off exhaust fan
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}
	
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}
	
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros
# I did not write this.

[gcode_macro DUMP_PARAMETERS]
gcode:
#[gcode_macro DUMP_PARAMETERS]
#gcode:
#  {% set parameters = namespace(output = '') %}
#  {% for name1 in printer %}
#    {% for name2 in printer[name1] %}
#      {% set donotwant = ['bed_mesh','configfile'] %}
#      {% if name1 is not in donotwant %}
#        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
#        {% set parameters.output = parameters.output +  param + "\n" %}
#      {% endif %}
#      {% else %}
#        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
#        {% set parameters.output = parameters.output +  param + "\n" %}
#    {% endfor %}
#  {% endfor %}
#  {action_respond_info(parameters.output)}

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE

[gcode_macro test]
gcode:
	{action_respond_info(printer.gcode_move.position.z|string)}


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel|int) %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED